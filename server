#!/bin/bash

if [ "$PULL" == "0" ]; then
  PULL_ARG=''
else
  PULL_ARG='--pull'
fi

# First, let's make sure that Docker Compose has been installed.
if ! [ -x "$(command -v docker-compose)" ]; then
  echo "Please install Docker Compose and try again."
  exit 1
fi

# Let's do the important things.
case "$1" in

  # Restarts some/all of the containers.
  restart)

    case "$2" in

      # Restarts the web container.
      web)
        $0 stop web
        $0 start web
        ;;

      # Restarts the worker container.
      worker)
        $0 stop worker
        $0 start worker
        ;;

      # Restarts the services.
      services)
        $0 stop services
        $0 start services
        ;;

      # Restarts all containers.
      *)
        $0 stop
        $0 start
        ;;

    esac
    ;;

  # Builds and starts some/all of our containers.
  start)

    case "$2" in

      # Builds and starts the web container.
      web)
        WEB_ID="$(docker ps -a -q --filter name=miracle_web)"
        if [ ! -z "$WEB_ID" ]; then
          $0 stop web
        fi
        docker build $PULL_ARG -t mozilla/miracle .
        docker run -d \
          -e "REDIS_HOST=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' miracle_redis`" \
          -p 8000:8000/tcp --name="miracle_web" mozilla/miracle web
        ;;

      # Builds and starts the worker container.
      worker)
        WORKER_ID="$(docker ps -a -q --filter name=miracle_worker)"
        if [ ! -z "$WORKER_ID" ]; then
          $0 stop worker
        fi
        docker build $PULL_ARG -t mozilla/miracle .
        docker run -d \
          -e "REDIS_HOST=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' miracle_redis`" \
          -e "DB_HOST=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' miracle_postgres`" \
          -e "DB_ROOT_CERT=postgres_dev_ssl.pem" \
          --name="miracle_worker" mozilla/miracle worker
        ;;

      # Builds and starts the services supporting the application container.
      services)
        docker-compose build $PULL_ARG
        docker-compose up -d
        ;;

      # Builds and starts all containers.
      *)
        $0 $1 services
        $0 $1 worker
        $0 $1 web
        ;;

    esac
    ;;

  # Stops some/all of our containers.
  stop)

    case "$2" in

      # Kills and removes the web container.
      web)
        WEB_ID="$(docker ps -a -q --filter name=miracle_web)"
        if [ ! -z "$WEB_ID" ]; then
          docker kill miracle_web >/dev/null
          docker rm miracle_web >/dev/null
        fi
        ;;

      # Kills and removes the worker container.
      worker)
        WORKER_ID="$(docker ps -a -q --filter name=miracle_worker)"
        if [ ! -z "$WORKER_ID" ]; then
          docker kill miracle_worker >/dev/null
          docker rm miracle_worker >/dev/null
        fi
        ;;

      # Stops the service containers.
      services)
        docker-compose stop
        ;;

      # Kills and removes all containers.
      *)
        $0 $1 web
        $0 $1 worker
        $0 $1 services
        ;;

    esac
    ;;

  # Runs command inside the container.
  run)
    $0 start services
    docker build $PULL_ARG -t mozilla/miracle .
    docker run -it --rm \
        -e "REDIS_HOST=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' miracle_redis`" \
        -e "DB_HOST=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' miracle_postgres`" \
        -e "DB_USER=miracle" -e "DB_PASSWORD=miracle" \
        -e "DB_ROOT_CERT=postgres_dev_ssl.pem" \
        -p 8000:8000/tcp \
        mozilla/miracle $2 $3 $4 $5 $6 $7 $8 $9
    ;;

  # Runs alembic inside the container.
  alembic)
    $0 run alembic $2 $3 $4 $5 $6 $7 $8 $9
    ;;

  # Open a shell inside the container.
  shell)
    $0 run shell
    ;;

  # Run the tests inside the container.
  test)
    $0 run test
    ;;

  # Shows usage information.
  help)
    echo "Usage: $0 {start|stop|restart|run|shell|test|alembic|help}"
    ;;

  # Shows help message.
  *)
    $0 help
    ;;

esac
